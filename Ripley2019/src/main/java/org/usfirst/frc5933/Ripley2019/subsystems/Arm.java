// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.Ripley2019.subsystems;


import org.usfirst.frc5933.Ripley2019.Robot;
import org.usfirst.frc5933.Ripley2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX armSubsystemMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private static final int kArmMaximumEncoderPos = 1200;
	private static final int kArmMinimumEncoderPos = 6;
	private static final double kP = 6.0;
	private static final double kI = 0;//0.001;
	private static final double kD = 0;
    private static final double kF = 0;

    public int blindCounter = 0;
    
    /**
	 * The ArmPositions correspond to absolute positions on an encoder
	 * feedback loop that the 'bot will score or get a cube from.
	 * The first three are all positions to acquire a cube, the next three
	 * are to score the cube, and Start should be used when in the pit
	 * and during disabled() to reset the arm for pit work and field setup. Continuous
	 * causes the arm to respond to a fluid set of inputs along its range.
	 */
	public enum ArmPosition {
		RocketHatchOne(73),
		RocketHatchTwo(656),
		RocketHatchThree(1119),
		Exchange(73),
		Start(0),
		Continuous(0),
		VBus(0);

		private final int pos;
		private ArmPosition(int encoderPos) {
			pos = encoderPos;
		}

		public int getPos() {
			return pos;
        }
    }

    public Arm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armSubsystemMotor = new WPI_TalonSRX(20);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    ArmPosition lastPos = ArmPosition.Start;

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    /**
	 * There are some magic numbers in here! They are set in the ArmPosition enum.
	 * @param pos
	 * is the {@link ArmPosition} to move the arm to.
	 * @param continuousInput
	 * is only to be used when in continuous mode. Must be constrained to values between -1 and 1, therefore it is recommended
	 * to only use during teleop in conjunction with a joystick.
	 */
	public void armPositionControl(ArmPosition pos, double continuousInput) {
		lastPos = pos;

		SmartDashboard.putString("Actual last position control", lastPos.name());

		switch(pos) {
		case Continuous:
			//get continuous position from joystick controller
			//Range needs to be condensed to values from -1 to 1
			//continuousArmPositionControl(continuousInput);
			break;
		case VBus:
			armSubsystemMotor.set(ControlMode.PercentOutput, continuousInput);
			break;
		default:
			armSubsystemMotor.set(ControlMode.Position, pos.getPos());
        }

        if(getLowerArmSwitch() > 0 && !getWithinThreshold(kArmMinimumEncoderPos, 2)) {
			armSubsystemMotor.setSelectedSensorPosition(ArmPosition.Start.pos, 0, 10);
		}
    }
    
    /**
	 * Maintains the arm in its last position, or through joystick input.
	 * @param continuousInput
	 */
	public void maintainLastArmPosition(double continuousInput) {
		// commenting out 12/17/18 to test running Default.java Commands 
		// in autonomous
		// armPositionControl(lastPos, continuousInput);  // 12/17/18
		System.out.println( "In maintainLastArmPosition call # " + blindCounter);
		blindCounter ++;
	}

        public void moveArm() {
            armSubsystemMotor.set(Robot.oi.subsystemJoystick.getY());
        }

        public void moveArmEncoder(int num, int pidIdx, int timeoutMs) {
            armSubsystemMotor.getSelectedSensorPosition(num);
        }

        public void readArm() {
            SmartDashboard.putNumber("Arm Speed:", armSubsystemMotor.get());
        }

        public void readEncoder() {
            SmartDashboard.putNumber("Arm Encoder Pos: ", armSubsystemMotor.getSelectedSensorPosition());
        }

        public void stop(){
            armSubsystemMotor.stopMotor();
        }

        public void armUp(){
            armSubsystemMotor.set(0.7);
        }         

        public void armDown(){
            armSubsystemMotor.set(-0.7);
        }

    public void periodic() {
        // Put code here to be run every loop

        readArm();
        readEncoder();

        setArmFeedback(10);

		armSubsystemMotor.configForwardSoftLimitEnable(false, 10);
		armSubsystemMotor.configReverseSoftLimitEnable(false, 10);

		armSubsystemMotor.configNominalOutputForward(0, 10);
		armSubsystemMotor.configNominalOutputReverse(0, 10);
		armSubsystemMotor.configPeakOutputForward(0.2, 10);//armSubsystemMotor.configPeakOutputForward(1, 10);
		armSubsystemMotor.configPeakOutputReverse(-1, 10);
		
		armSubsystemMotor.configClosedloopRamp(0.5, 10); //seconds to full frontal val. Should help stop swinging. Could also use d-coeff.
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    /**
	 * Gets the status of the lower Arm switch (DIP 9) as per hardware upgrade between Utah and Idaho regionals.
	 * @return
	 * 0 if open (false, signal NOT connected to ground); 1 if closed (true, signal connected to ground)
	 */
	public int getLowerArmSwitch() {
		return Robot.RoboRio.readDips(9, 10, true);
    }
    
    /**
	 * Gets the status of the upper arm switch (DIP 8) as per hardware upgrade between Utah and Idaho regionals.
	 * @return
	 * 0 if open (false, signal NOT connected to ground); 1 if closed (true, signal connected to ground)
	 */
	public int getUpperArmSwitch() {
		return Robot.RoboRio.readDips(8, 9, true);
	}

    public void setArmFeedback(int timeoutMs) {
        resetEncoder();
        
		armSubsystemMotor.config_kP(0, kP, timeoutMs);
		armSubsystemMotor.config_kI(0, kI, timeoutMs);
		armSubsystemMotor.config_kD(0, kD, timeoutMs);
		armSubsystemMotor.config_kF(0, kF, timeoutMs);
    }
    
    public void resetEncoder() {
		armSubsystemMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);
        armSubsystemMotor.setSelectedSensorPosition(ArmPosition.Start.pos, 0, 10);
        
        if(getLowerArmSwitch() > 0) {
			armSubsystemMotor.setSelectedSensorPosition(ArmPosition.Start.pos, 0, 10);
		}
		
		if(getUpperArmSwitch() > 0) {
			armSubsystemMotor.setSelectedSensorPosition(ArmPosition.RocketHatchThree.pos, 0, 10);
		}
    }
    
    public boolean getWithinThreshold(int pos, int threshold) {
		// TODO Auto-generated method stub
		return armSubsystemMotor.getSelectedSensorPosition(0) < pos + threshold && armSubsystemMotor.getSelectedSensorPosition(0) > pos - threshold;
	}
}

